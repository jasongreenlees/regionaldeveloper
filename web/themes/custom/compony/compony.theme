<?php

/**
 * @file
 * Functions to support theming in the compony theme.
 */

use Drupal\Core\Serialization\Yaml;
use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
use Drupal\Core\Asset\Exception\InvalidLibraryFileException;

 /**
  * Implements hook_library_info_alter().
  */
function compony_library_info_alter(&$libraries, $extension) {
  $theme_name = basename(__FILE__, '.theme');
  $theme_path = drupal_get_path('theme', $theme_name);

  // Alter the library of this theme only
  if ($extension == $theme_name) {
    $directory_iterator = new RecursiveDirectoryIterator($theme_path . '/components/');
    foreach (new RecursiveIteratorIterator($directory_iterator) as $file) {
      if ($file->getFilename() == 'libraries.yml') {
        try {
          $componentPathFromRoot = substr($file->getPathName(), 0, -13);
          $componentPathFromTheme = str_replace($theme_path . '/', '', $componentPathFromRoot);

          $new_libraries = Yaml::decode(file_get_contents($file->getRealPath()));
          foreach ($new_libraries as $key => $new_library) {
            if(isset($libraries[$key])) {
              \Drupal::messenger()
                ->addWarning(t('The library @key from the theme @themename has multiple definitions.', [
                  '@key' => $key,
                  '@themename' => $theme_name,
                ]));
            } else {
              if (isset($new_library['css'])) {
                foreach($new_library['css'] as $group_key => $css_grouped) {
                  foreach($css_grouped as $file_key => $css_file) {
                    if(substr($file_key, 0, 11) == 'components/') {
                      // Path is absolutely defined (deprecated, but as default assumed by Drupal)
                      // $new_library['css'][$group_key][$file_key] = $css_file;
                    } else {
                      if (isset($css_file['type'])) {
                        if ($css_file['type'] == 'external') {
                          continue;
                        }
                      }

                      // Path is relatively defined
                      $new_library['css'][$group_key][$componentPathFromTheme . $file_key] = $css_file;
                      unset($new_library['css'][$group_key][$file_key]);
                    }
                  }
                }
              }

              if (isset($new_library['js'])) {
                foreach($new_library['js'] as $file_key => $js_file) {
                  if(substr($file_key, 0, 11) == 'components/') {
                    // Path is absolutely defined (deprecated, but as default assumed by Drupal)
                  } else {
                    if (isset($js_file['type'])) {
                      if ($js_file['type'] == 'external') {
                        continue;
                      }
                    }

                    // Path is relatively defined
                    $new_library['js'][$componentPathFromTheme . $file_key] = $js_file;
                    unset($new_library['js'][$file_key]);
                  }
                }
              }

              $libraries[$key] = $new_library;
            }
          }
        } catch (InvalidDataTypeException $e) {
          // Rethrow a more helpful exception to provide context.
          throw new InvalidLibraryFileException(sprintf('Invalid library definition in %s: %s', $file->getRealPath(), $e->getMessage()), 0, $e);
        }
      }
    }
  };

  // Add extra theme hooks so that components can define their own themehooks!
  $components = new RecursiveDirectoryIterator($theme_path . '/components/');
  foreach (new RecursiveIteratorIterator($components) as $file) {
    if ($file->getExtension() == 'theme') {
      $pathName = $file->getPathName();
      $componentName = basename($pathName, '.theme');
      $componentPHPName = str_replace('-', '_', $componentName);
      $function = __FUNCTION__ . '__' . $componentPHPName;
      if (function_exists($function)) {
        $function($libraries, $extension);
      }
    }
  }
}


/**
 * Implements hook_theme().
 */
function compony_theme($existing, $type, $theme, $path) {
  // Create theme-partials php file
  $theme_name = basename(__FILE__, '.theme');
  $theme_path = drupal_get_path('theme', $theme_name);

  $partials_content = "<?php \n";
  $components = new RecursiveDirectoryIterator($theme_path . '/components/');
  foreach (new RecursiveIteratorIterator($components) as $file) {
    if ($file->getExtension() == 'theme') {
      $pathName = $file->getPathName();

      $partials_content .= 'if(file_exists("' . $pathName . '")) {' . "\n";
      $partials_content .=   'require_once("' . $pathName . '");' . "\n";
      $partials_content .= '}' . "\n";
    }
  }
  $create_private_partials_file = file_unmanaged_save_data($partials_content, $theme_path . '/theme-partials.php', true);

  // Add extra theme hooks so that components can define their own themehooks!
  $themehooks = [];
  $components = new RecursiveDirectoryIterator($theme_path . '/components/');
  foreach (new RecursiveIteratorIterator($components) as $file) {
    if ($file->getExtension() == 'theme') {
      $pathName = $file->getPathName();
      $componentName = basename($pathName, '.theme');
      $componentPHPName = str_replace('-', '_', $componentName);
      $function = __FUNCTION__ . '__' . $componentPHPName;

      if (function_exists($function)) {
        $themehooks[$componentPHPName] = $function($existing, $type, $theme, $path);
        $themehooks[$componentPHPName]['path'] = implode('/', explode('/', $pathName, -1));
      }
    }
  }

  return $themehooks;
}

// Load in the theme-partials
$theme_name = basename(__FILE__, '.theme');
$theme_path = drupal_get_path('theme', $theme_name);

$partials_filename = $theme_path . '/theme-partials.php';
if(file_exists($partials_filename)) {
  require_once($partials_filename);
} else {
  // The very first pageload after a deploy, will create the partials file,
  // but this if statement is ran just before that,
  // so have a fallback to the globbing discovery until it uses the partials file.
  $components = new RecursiveDirectoryIterator($theme_path . '/components/');
  foreach (new RecursiveIteratorIterator($components) as $file) {
    if ($file->getExtension() == 'theme') {
      $pathName = $file->getPathName();
      require_once($pathName);
    }
  }
}
